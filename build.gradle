import org.apache.commons.io.FileUtils

buildscript {
	repositories {
		jcenter()
	}
	
	dependencies {
		classpath 'commons-io:commons-io:2.4'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.2'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

configurations {
	normalConfiguration
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	sourcesJar
}

publishing {
	publications {
		normalPublication(MavenPublication) {
			artifactId 'diff'
			from components.java
			artifact sourcesJar
		}
	}
}

bintray {
	user = bintrayUser
	key = bintrayKey
	dryRun = false
	publish = false
	pkg {
		repo = 'meme'
		name = 'diff'
			configurations = ['normalConfiguration']
			publications = ['normalPublication']
	}
}

final int NUMBER_OF_TESTS = 3

def createTestTask(int testNumber, String testName, String mainClass, String inputFile, String processFile, String outputFile, String expectedOutputFile, String patchFormat, String patchFileFormat) {
	Task testTask = task("test${testName}${testNumber}${patchFileFormat}") << {
		String outputFileExt = patchFileFormat == 'binary' ? 'bin' : 'txt'
		String processFileExt = processFile == 'patch' ? outputFileExt : 'txt'
		String expectedFileExt = outputFile == 'patchTestOutput' ? outputFileExt : 'txt'
		File output = file("test/${outputFile}${testNumber}.${outputFileExt}")
		if (output.exists()) {
			output.delete()
		}
		
		List<String> args = [ 'java', '-cp', "${jar.archivePath}", mainClass, "test/${inputFile}${testNumber}.txt", "test/${processFile}${testNumber}.${processFileExt}", "test/${outputFile}${testNumber}.${outputFileExt}" ]
		if (patchFormat != null) {
			args += patchFormat
		}
		args += patchFileFormat
		String[] argsArray = new String[args.size()]
		for (int i = 0; i < argsArray.length; i++) {
			argsArray[i] = args.get i
		}
 		Process process = new ProcessBuilder(argsArray).inheritIO().directory(file('.')).start()
		int exitCode = process.waitFor()
		if (exitCode != 0) {
			println "Test failed, process exited with exitcode ${exitCode}"
		} else if (!FileUtils.contentEquals(output, file("test/${expectedOutputFile}${testNumber}.${expectedFileExt}"))) {
			println 'Test failed, output file contents did not match the expected file contents'
		} else {
			println 'Test successful'
		}
	}
	testTask.dependsOn jar
	return testTask
}

def createTestDiffTask(int testNumber, String patchFileFormat) {
	final String[] PATCH_FORMATS = [
		"normal",
		"java",
		"byte"
	]
	return createTestTask(testNumber, 'Diff', 'net.earthcomputer.meme.diff.DiffFinder', 'base', 'work', 'patchTestOutput', 'patch', PATCH_FORMATS[testNumber - 1], patchFileFormat)
}

def createTestPatchTask(int testNumber, String patchFileFormat) {
	return createTestTask(testNumber, 'Patch', 'net.earthcomputer.meme.diff.Patcher', 'base', 'patch', 'workTestOutput', 'work', null, patchFileFormat)
}

task testAllDiff
task testAllPatch
task testAll
testAll.dependsOn testAllDiff
testAll.dependsOn testAllPatch
test.dependsOn testAll

for (int i = 1; i <= NUMBER_OF_TESTS; i++) {
	testAllDiff.dependsOn createTestDiffTask(i, 'text')
	testAllDiff.dependsOn createTestDiffTask(i, 'binary')
	testAllPatch.dependsOn createTestPatchTask(i, 'text')
	testAllPatch.dependsOn createTestPatchTask(i, 'binary')
}

archivesBaseName = 'memediff'
group = 'net.earthcomputer.meme'
version = "${versionMajor}.${versionMinor}.${versionRevision}.${versionBuildNumber}"

def bumpVersionNumber(String versionPart) {
	Properties props = new Properties()
	File propsFile = file('gradle.properties')
	props.load(propsFile.newDataInputStream())
	int nextBuildNum = (((props.getProperty("version${versionPart}")) as BigInteger) + 1)
	props.setProperty("version${versionPart}", nextBuildNum.toString())
	props.store(propsFile.newWriter(), null)
	props.load(propsFile.newDataInputStream())
}

task bumpBuildNumber << {
	bumpVersionNumber('BuildNumber')
}
build.dependsOn bumpBuildNumber

task bumpRevision << {
	bumpVersionNumber('Revision')
}

task bumpMinor << {
	bumpVersionNumber('Minor')
}

task bumpMajor << {
	bumpVersionNumber('Major')
}

jar {
	manifest {
		attributes 'Main-Class': 'net.earthcomputer.meme.diff.DiffFinder'
	}
}
